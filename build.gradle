import java.text.SimpleDateFormat

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'biz.aQute.bnd:biz.aQute.bnd.gradle:4.3.1'
        classpath 'com.google.gradle:osdetector-gradle-plugin:1.6.2'
        classpath 'org.javamodularity:moduleplugin:1.6.0'
        classpath 'org.beryx:badass-jlink-plugin:2.16.4'
    }
}

plugins {
    id 'idea'
    id 'java-library'
    id 'com.google.osdetector' version '1.6.2'
    id 'org.javamodularity.moduleplugin' version '1.6.0'
    id 'org.beryx.jlink' version '2.17.2'
    id 'maven-publish'
    id 'net.nemerosa.versioning' version '2.10.0'
    id 'com.jfrog.bintray' version '1.8.5'
}

apply plugin: 'biz.aQute.bnd.builder'

sourceCompatibility = '11'

wrapper {
    gradleVersion = '6.4'
}

description = 'JavaFX Polar Plot library'

Date buildTimeAndDate = new Date()
ext {
    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
}

group 'com.chainstaysoftware.polarplot'
version '11.0-SNAPSHOT'

ext.platform = osdetector.os == 'osx' ? 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    implementation "org.openjfx:javafx-base:11:$platform"
    implementation "org.openjfx:javafx-graphics:11:$platform"
    implementation "org.openjfx:javafx-controls:11:$platform"
    implementation "org.openjfx:javafx-swing:11:$platform"
}

mainClassName = "$moduleName/com.chainstaysoftware.polarplot.Demo"

jar {
    manifest {
        attributes(
                'Built-By'              : System.properties['user.name'],
                'Created-By'            : System.properties['java.version'] + " (" + System.properties['java.vendor'] + " " + System.properties['java.vm.version'] + ")",
                'Build-Date'            : project.buildDate,
                'Build-Time'            : project.buildTime,
                'Build-Revision'        : versioning.info.commit,
                'Specification-Title'   : project.name,
                'Specification-Version' : project.version,
                'Implementation-Title'  : project.name,
                'Implementation-Version': project.version,
                'Bundle-Name'           : project.name,
                'Bundle-License'        : 'https://www.apache.org/licenses/LICENSE-2.0;description=Apache License Version 2.0;link=https://www.eclipse.org/legal/eplfaq.php',
                'Bundle-Description'    : description,
                'Bundle-SymbolicName'   : 'com.chainstaysoftware.polarplot',
                'Export-Package'        : 'com.chainstaysoftware.polarplot, com.chainstaysoftware.polarplot.data, com.chainstaysoftware.polarplot.event, com.chainstaysoftware.polarplot.series, com.chainstaysoftware.polarplot.tools, com.chainstaysoftware.polarplot.transform'
        )
    }
}


// create one jar for the javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

// create one jar for the source files
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

def pomConfig = {
    name 'polarplot'
    url
    inceptionYear '2020'
    licenses {
        license([:]) {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
        }
    }
    scm {
    }
    developers {
    }
}

publishing {
    publications {
        mavenCustom(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom.withXml {
                asNode().children().last() + pomConfig
                asNode().appendNode('description', description)
            }
        }
    }
}
